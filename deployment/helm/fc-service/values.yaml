name: fc-service
replicaCount: 1

image:
  repository: registry.gitlab.com/gaia-x/data-infrastructure-federation-services/cat/fc-service/fc-service-server
  pullPolicy: Always
  tag: "1.1.1"

fullnameOverride: "fc-service"

serviceAccount:
  create: false
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext: 
  allowPrivilegeEscalation: false

securityContext: {} 

service:
  type: ClusterIP
  port: 8081

ingress:
  enabled: true
  className: nginx
  annotations: 
    kubernetes.io/ingress.allow-http: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/affinity: cookie
    nginx.ingress.kubernetes.io/session-cookie-expires: "172800"
    nginx.ingress.kubernetes.io/session-cookie-max-age: "172800"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "128k"
  hosts:
    - host: fc-server.stackable.com
      paths:
        - path: /
          pathType: Prefix

resources: {}

probes:
  path: /actuator/health
  initialDelaySeconds: 60
  periodSeconds: 30             

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: 
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app
                operator: In
                values:
                  - fc-service
          topologyKey: "kubernetes.io/hostname"
          
restartPolicy: Always

hostAliases:
  - ip: "127.0.0.1" # ClusterIP of Ingress Controller
    hostnames:
      - key-server.stackable.com
    
storage:
  enabled: false
  size: 2Gi
  path: /mnt/data/postgresql

env:
  - name: DATASTORE_FILE_PATH
    value: /var/lib/fc-service/filestore
  - name: GRAPHSTORE_URI
    value: bolt://fc-neo4j:7687
  - name: GRAPHSTORE_QUERY_TIMEOUT_IN_SECONDS
    value: "5"
  - name: GRAPHSTORE_PASSWORD
    value: neo12345
  - name: KEYCLOAK_AUTH_SERVER_URL
    value: http://fc-keycloak-headless.federated-catalogue.svc.cluster.local:8080
  - name: KEYCLOAK_CREDENTIALS_SECRET
    valueFrom:
      secretKeyRef:
        name: fc-keycloak-client-secret
        key: keycloak_client_secret   
  - name: SPRING_DATASOURCE_URL
    value: jdbc:postgresql://fc-postgres:5432/postgres
  - name: SPRING_DATASOURCE_PASSWORD
    valueFrom:
      secretKeyRef:
        name: fc-postgres
        key: postgres-password
  - name: SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI
    value: http://key-server.stackable.com/realms/gaia-x

postgresql:
  fullnameOverride: fc-postgres
  nameOverride: fc-postgres
  auth:
    postgresPassword: postgres
    username: keycloak
    password: keycloak
    database: keycloak
  primary:
    persistence:
      enabled: true
    initdb:
      user: postgres
      password: postgres
      scripts:
        00_init_keycloak.sql: |  
          CREATE USER keycloak WITH PASSWORD 'keycloak';
          CREATE DATABASE "keycloak" WITH OWNER keycloak;
          GRANT ALL PRIVILEGES ON DATABASE keycloak TO $POSTGRES_USER;
  
keycloak:
  fullnameOverride: fc-keycloak
  image:
    tag: 20.0.2
  auth:
    adminUser: admin
    adminPassword: admin
  extraEnvVars:
    - name: KEYCLOAK_EXTRA_ARGS
      value: "-Dkeycloak.import=/config/gaia-x-realm.json"
    - name: PROXY_ADDRESS_FORWARDING
      value: "true"
    - name: KEYCLOAK_FRONTEND_URL
      value: "http://key-server.stackable.com/"
    - name: KEYCLOAK_ADMIN_URL
      value: "http://key-server.stackable.com/admin/"
  extraVolumeMounts:
    - name: config
      mountPath: "/config"
      readOnly: true
  extraVolumes:
    - name: config
      configMap:
        name: fc-keycloak-realm-configmap
        items:
        - key: "gaia-x-realm.json"
          path: "gaia-x-realm.json"
  logging:
    level: "DEBUG,io.quarkus:INFO,freemarker.cache:INFO,liquibase:INFO,org.hibernate:INFO,org.infinispan:INFO,org.keycloak.services.scheduled:INFO,org.keycloak.transaction:INFO,io.netty.buffer.PoolThreadCache:INFO,org.keycloak.models.sessions.infinispan:INFO"
  proxy: edge
  postgresql:
    enabled: false
    auth:
      existingSecret: fc-postgres
  externalDatabase:
    host: fc-postgres
    database: keycloak
    user: keycloak
    existingSecret: fc-postgres
    existingSecretPasswordKey: "password"
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      nginx.ingress.kubernetes.io/proxy-buffer-size: "128k"
    pathType: Prefix
    path: /
    hostname: key-server.stackable.com
    servicePort: 8080
  serviceAccount:
    create: false
  service:
    ports:
      http: 8080  
    
neo4j:
  fullnameOverride: fc-neo4j
  neo4j:
    name: fc-neo4j-db
    password: "neo12345"
  volumes:
    data:
      mode: defaultStorageClass
  env:
    NEO4J_PLUGINS: '["apoc", "graph-data-science", "n10s"]'
  additionalVolumes: 
    - name: fc-neo4j-data
      emptyDir: {}
  additionalVolumeMounts: 
    - name: fc-neo4j-data
      mountPath: "/var/lib/neo4j/plugins"
  config:
    dbms.security.procedures.unrestricted: gds.*,apoc.*,n10s.*,semantics.*
    dbms.security.procedures.allowlist: gds.*,apoc.*,n10s.*,semantics.*
  initContainers:
    - name: init-plugins
      image: appropriate/curl:latest
      imagePullPolicy: IfNotPresent
      volumeMounts:
        - name: fc-neo4j-data
          mountPath: /var/lib/neo4j/plugins
      securityContext:
        allowPrivilegeEscalation: false    
      command:
        - "/bin/sh"
        - "-c"
        - |
          curl -L https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/5.5.0/apoc-5.5.0-extended.jar -O
          curl -L https://github.com/neo4j-labs/neosemantics/releases/download/5.5.0.0/neosemantics-5.5.0.0.jar -O
          curl -L https://graphdatascience.ninja/neo4j-graph-data-science-2.3.5.jar -O
          cp -R apoc-5.5.0-extended.jar /var/lib/neo4j/plugins
          cp -R neosemantics-5.5.0.0.jar /var/lib/neo4j/plugins
          cp -R neo4j-graph-data-science-2.3.5.jar /var/lib/neo4j/plugins
